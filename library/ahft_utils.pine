//@version=5
library("ahft_utils", overlay=false)
//@library_version 2
// Locked for Helios Nexus

f_safe_array_get(arr, idx, def) =>
    idx >= 0 and idx < array.size(arr) ? array.get(arr, idx) : def

f_clamp(x, a, b) =>
    math.max(a, math.min(b, x))

f_normalize(x) =>
    nz(math.max(-1.0, math.min(1.0, x)))

f_push_cap(arr, val, max_len) =>
    if array.size(arr) >= max_len
        array.shift(arr)
    array.push(arr, val)
    arr

f_rand_beta(a, b) =>
    u1 = math.max(1e-9, math.min(1 - 1e-9, math.random()))
    u2 = math.max(1e-9, math.min(1 - 1e-9, math.random()))
    v = math.pow(u1, 1 / a)
    w = math.pow(u2, 1 / b)
    v / (v + w)


f_resize(arr, new_len, filler) =>
    while array.size(arr) > new_len
        array.pop(arr)
    while array.size(arr) < new_len
        array.push(arr, filler)
    arr

f_array_stdev(a) =>
    m = array.avg(a)
    var_sum = 0.0
    for i = 0 to array.size(a) - 1
        var_sum += math.pow(f_safe_array_get(a, i, m), 2)
    array.size(a) > 1 ? math.sqrt(var_sum / (array.size(a) - 1)) : 0

f_zscore_normalize_array(src_array) =>
    normalized = array.new_float(array.size(src_array), 0.0)
    m = array.avg(src_array)
    sd = f_array_stdev(src_array)
    if sd > 0
        for i = 0 to array.size(src_array) - 1
            v = f_safe_array_get(src_array, i, m)
            z = (v - m) / sd
            array.set(normalized, i, f_normalize(z))
    normalized

f_array_percentile(arr, pct) =>
    if array.size(arr) == 0
        0.0
    else
        sorted = array.copy(arr)
        array.sort(sorted)
        idx = int(math.floor(pct / 100 * (array.size(sorted) - 1)))
        f_safe_array_get(sorted, idx, 0.0)
